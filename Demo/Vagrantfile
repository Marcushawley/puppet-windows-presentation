# 1.3.5 was the earliest known version of Vagrant to work with
# Windows in some form
Vagrant.require_version ">= 1.3.5"
if Vagrant::VERSION < '1.6.0'
  Vagrant.require_plugin "vagrant-windows"
end

Vagrant.configure("2") do |config|
  # This setting will download the atlas box at
  # https://atlas.hashicorp.com/ferventcoder/boxes/win2012r2-x64-nocm
  config.vm.box = "ferventcoder/win2012r2-x64-nocm"
  # You are likely going to need one of the below. I have not tested these
  # but it's likely they will work. The initial download of the box is going
  # to take quite awhile. Kick this off and go get tea/coffee.
  # https://atlas.hashicorp.com/opentable/boxes/win-2012r2-standard-amd64-nocm
  #config.vm.box = "opentable/win-2012r2-standard-amd64-nocm"
  # https://atlas.hashicorp.com/mwrock/boxes/Windows2012R2
  #config.vm.box = "mwrock/Windows2012R2"

  config.vm.provider :virtualbox do |v, override|
    # Unless you are using Atlas above in the vm.box name, you should
    # uncomment and provide a url.
    #override.vm.box_url = = ENTER A URL TO A VALID Virtual Box BASE BOX OF win2012r2
    # Show the GUI
    v.gui = true
    # Linked clones for extremely fast import of machines
    v.linked_clone = true if Vagrant::VERSION >= '1.8.0'
    # Box customizations for speed
    # - 4GB RAM
    v.customize ["modifyvm", :id, "--memory", "4096"]
    # - 2 CPUs
    v.customize ["modifyvm", :id, "--cpus", "2"]
    # - Video RAM is 32 MB
    v.customize ["modifyvm", :id, "--vram", 32]
    # - Better DNS resolution
    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    # - No audo
    v.customize ["modifyvm", :id, "--audio", "none"]
    # - Clipboard enabled
    v.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    v.customize ["modifyvm", :id, "--draganddrop", "hosttoguest"]
    # - USB off
    v.customize ["modifyvm", :id, "--usb", "off"]
  end

  config.vm.provider :vmware_fusion do |v, override|
    # Unless you are using Atlas above in the vm.box name, you should
    # uncomment and provide a url.
    #override.vm.box_url = = ENTER A URL TO A VALID VMWARE FUSION BASE BOX OF win2012r2
    # Show the GUI
    v.gui = true
    # Linked clones for extremely fast import of machines
    v.linked_clone = true if Vagrant::VERSION >= '1.8.0'
    # box customizations for speed
    # - 4 GB of RAM
    v.vmx["memsize"] = "4096"
    # - No audo
    v.vmx["sound.present"] = "false"
     # - USB off
    v.vmx["usb.present"] = "false"
    v.vmx["ide1:0.present"] = "false"
  end

  # In newer Vagrant versions that support Windows natively we use the
  # winrm communicator. In older vagrants it was handled by overrides in
  # the vagrant-windows plugin
  if Vagrant::VERSION >= '1.6.0'
    config.vm.communicator = "winrm"
  end

  # explicitly let the system know we are on Windows
  config.vm.guest = :windows
  # set the timeout for commands
  config.windows.halt_timeout = 20
  config.winrm.username = "vagrant"
  config.winrm.password = "vagrant"

  # open up forwarded ports from the guest system to the host.
  config.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true
  # Port forward SSH (ssh is forwarded by default in most versions of Vagrant, but be sure)
  # It's not necessary if you are not using SSH, but it doesn't hurt anything to have it
  config.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh", auto_correct: true
  config.vm.network :forwarded_port, guest: 80, host: 8090, id: "web", auto_correct: true

  # create a symlink from the modules folder to the modules location on the Windows server.
  #config.vm.synced_folder "puppet/modules", "/ProgramData/PuppetLabs/puppet/etc/modules"
  #config.vm.synced_folder "puppet/modules", "/ProgramData/PuppetLabs/code/environments/production/modules"

  # These shell provisioners ensure that Windows is configured and Puppet is
  # installed. Run this first, to get box setup, then comment this and
  # change the provisioner from empty.pp to provision.pp
  config.vm.provision :shell, :path => "shell/PrepareWindows.ps1"
  # We are going to let Puppet install Chocolatey instead.
  #config.vm.provision :shell, :path => "shell/InstallChocolatey.ps1"
  config.vm.provision :shell, :path => "shell/InstallPuppetFromMSI.ps1"
  # set up DSC
  config.vm.provision :shell, :path => "shell/SetupDSCComponents.ps1"

  # If you really want to see some output, use this line instead
  #config.vm.provision :puppet, :options => ["--debug --trace --verbose"] do |puppet|
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "puppet/manifests"
  #   puppet.manifest_file  = "empty.pp"
  #   puppet.module_path = "puppet/modules"
  #   puppet.environment = "production"
  # end

  config.vm.provision :shell, :path => "shell/NotifyGuiAppsOfEnvironmentChanges.ps1"
end
